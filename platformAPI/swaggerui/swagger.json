{
  "swagger": "2.0",
  "info": {
    "description": "This is a swagger documentation for DIP api's endpoints.",
    "version": "0.1.0",
    "title": "DIP",
    "contact": {
      "email": "nikolaosppd@g mail.com"
    }
  },
  "externalDocs": {
    "description": "Find out more about DIP",
    "url": "https://github.com/nikospd/dip"
  },
  "host": "localhost:1323",
  "tags": [
    {
      "name": "user",
      "description": "About user auth and user info"
    },
    {
      "name": "application",
      "description": "About application resource"
    },
    {
      "name": "storage",
      "description": "About storage management"
    },
    {
      "name": "source token",
      "description": "About source token management. For push mechanism"
    },
    {
      "name": "pull source",
      "description": "About pull source management. For pull mechanism"
    },
    {
      "name": "data",
      "description": "About data payloads"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/user/login": {
      "post": {
        "tags": ["user"],
        "summary": "User login",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {"type": "string"},
                "password": {"type": "string"}
              }
            }
          }
        ],
        "responses": {
          "404": {"description": "Not Found"},
          "200": {
            "description": "Returns the jwt",
            "schema": {"type": "object", "properties": {"token": {"type": "string"}}}}
        }
      }
    },
    "/user/register": {
      "post": {
        "tags": ["user"],
        "summary": "User registration endpoint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {"type": "string"},
                "password": {"type": "string"},
                "email": {"type": "string"}
              }
            }
          }
        ],
        "responses": {
          "400":{
            "description": "Bad Request",
            "schema": {"type": "object", "properties": {"msg": {"type": "string", "example": "Username or email already exist"}}}
          },
          "200": {
            "description": "OK",
            "schema": {"type": "object", "properties": {"token": {"type": "string"}}}
          }
        }
      }
    },
    "/user/profile": {
      "get": {
        "tags": ["user"],
        "security": [{"Bearer": []}],
        "summary": "Endpoint with purpose of searching user's profile by username or email",
        "description": "If none of the name / email are provided, the endpoint reurns the profile of the logged in user",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "type": "string"
          }
        ],
        "responses": {
          "404": {"description": "Not Found"},
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {"$ref": "#/definitions/User"}

            }
          }
        }
      }
    },
    "/application": {
      "post": {
        "tags": ["application"],
        "summary": "Creates a new application",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Creates  a new application. You only provide a source type and a description. After that you attach resources (storage, sources etc) by separate endpoints",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "sourceType": {"type": "string", "enum": ["push", "pull"]},
                "description": {"type": "string"}
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {"type": "object", "properties": {"id": {"type": "string"}}}
          }
        },
        "security": [{"Bearer": []}]
      },
      "get": {
        "tags": ["application"],
        "summary": "Get apps by user. Get all the applications that belongs to the logged in user",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {"$ref": "#/definitions/Application"}

            }
          }
        },
        "security": [{"Bearer": []}]

      }
    },
    "/application/{appId}": {
      "parameters": [
        {
          "in": "path",
          "name": "appId",
          "type": "string",
          "required": true,
          "description": "Unique appId to search for"
        }
      ],
      "get": {
        "tags": ["application"],
        "summary": "Get app by id",
        "responses": {
          "200": {
            "description": "",
            "schema": {"$ref": "#/definitions/Application"}
          }
        },
        "security": [{"Bearer": []}]

      },
      "put": {
        "tags": ["application"],
        "summary": "Updates the application's description",
        "parameters": [
          {
            "in": "body",
            "name": "description",
            "schema": {
              "type": "object",
              "properties": {
                "description": {"type": "string"}
              }
            }
          }
        ],
        "responses": {
          "200": {"description": "OK"}
        },
        "security": [{"Bearer": []}]
      },
      "delete": {
        "tags": ["application"],
        "summary": "Deletes an application with the given appId",
        "responses": {
          "200": {"description": "OK"}
        },
        "security": [{"Bearer": []}]

      }
    },
    "/storage":{
      "post": {
        "tags": ["storage"],
        "summary": "Creates a new storage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Creates  a new storage. You only provide a source type and a description. At the moment, only cloudMongo type is supported. This type is a pre installed mongoDB instance at server side",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {"type": "string", "enum": ["cloudMongo", "proprietaryMongo"]},
                "description": {"type": "string"}
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {"type": "object", "properties": {"id": {"type": "string"}}}
          }
        },
        "security": [{"Bearer": []}]
      }
    },
    "/storage/{storageId}": {
      "parameters": [
        {
          "in": "path",
          "name": "storageId",
          "type": "string",
          "required": true,
          "description": "Unique storageId to search for"
        }
      ],
      "get": {
        "tags": ["storage"],
        "summary": "Get storage by id.",
        "responses": {
          "200": {
            "description": "",
            "schema": {"$ref": "#/definitions/Storage"}
          }
        },
        "security": [{"Bearer": []}]
      },
      "put": {
        "tags": ["storage"],
        "summary": "Updates the storage's description",
        "parameters": [
          {
            "in": "body",
            "name": "description",
            "schema": {
              "type": "object",
              "properties": {
                "description": {"type": "string"}
              }
            }
          }
        ],
        "responses": {
          "200": {"description": "OK"}
        },
        "security": [{"Bearer": []}]
      },
      "delete": {
        "tags": ["storage"],
        "summary": "Deletes a storage with the given storageId",
        "responses": {
          "200": {"description": "OK"}
        },
        "security": [{"Bearer": []}]

      }
    },
    "/storages": {
      "get": {
        "tags": ["storage"],
        "summary": "Get all storages that belongs to the logged in user",
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {"$ref": "#/definitions/Storage"}
            }
          }
        },
        "security": [{"Bearer": []}]
      }
    },
    "/storages/{appId}":{
      "parameters": [
        {
          "in": "path",
          "name": "appId",
          "type": "string",
          "required": true,
          "description": "Unique appId to search for"
        }
      ],
      "get": {
        "tags": ["storage"],
        "summary": "Get storages by app.",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {"$ref": "#/definitions/Storage"}
            }
          }
        },
        "security": [{"Bearer": []}]
      }
    },
    "/storage/share/{storageId}":{
      "parameters": [
        {
          "in": "path",
          "name": "storageId",
          "type": "string",
          "required": true,
          "description": ""
        },
        {
          "in": "body",
          "name": "body",
          "schema": {
            "type": "object",
            "properties": {
              "targetId": {"type": "string", "description": "dsa"}
            }
          }
        }
      ],
      "post":{
        "tags": ["storage"],
        "summary": "Share a storage with another user using the userId",
        "responses": {
          "200": {"description": "OK"},
          "404": {"description": "Storage not found or already shared with target"}
        },
        "security": [{"Bearer": []}]
      }
    },
    "/storage/unshare/{storageId}":{
      "parameters": [
        {
          "in": "path",
          "name": "storageId",
          "type": "string",
          "required": true,
          "description": ""
        },
        {
          "in": "body",
          "name": "body",
          "schema": {
            "type": "object",
            "properties": {
              "targetId": {"type": "string", "description": "dsa"}
            }
          }
        }
      ],
      "post":{
        "tags": ["storage"],
        "summary": "Unshare a storage with another user using the userId",
        "responses": {
          "200": {"description": "OK"},
          "404": {"description": "Storage not found or not sharing with target"}
        },
        "security": [{"Bearer": []}]
      }
    },
    "/storage/attach/{storageId}": {
      "parameters": [
        {
          "in": "path",
          "name": "storageId",
          "type": "string",
          "required": true,
          "description": ""
        },
        {
          "in": "body",
          "name": "body",
          "schema": {
            "type": "object",
            "properties": {
              "appId": {"type": "string"},
              "scope": {"type": "string", "example": "rawPersistence"}
            }
          }
        }
      ],
      "post":{
        "summary": "Attach a storage to an app for raw persistence. Later, different scopes should be supported like aggregated persistence for an aggregation recipe",
        "tags": ["storage"],
        "responses":{
          "400": {"description": "app or storage does not belong to the user"},
          "200": {"description": "Storage successfully attached to the app"}
        },
        "security": [{"Bearer": []}]
      }
    },
    "/storage/detach/{storageId}": {
      "parameters": [
        {
          "in": "path",
          "name": "storageId",
          "type": "string",
          "required": true,
          "description": ""
        },
        {
          "in": "body",
          "name": "body",
          "schema": {
            "type": "object",
            "properties": {
              "appId": {"type": "string"}
            }
          }
        }
      ],
      "post":{
        "summary": "Detach a storage from an app for raw persistence. Later, different scopes should be supported like aggregated persistence for an aggregation recipe",
        "tags": ["storage"],
        "responses":{
          "400": {"description": "app or storage does not belong to the user"},
          "200": {"description": "Storage successfully detached from the app"}
        },
        "security": [{"Bearer": []}]
      }
    },
    "/source/token": {
      "post":{
        "summary": "Creates a new source token for the push mechanism",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "appId": {"type": "string"},
                "description": {"type": "string"}
              }
            }
          }
        ],
        "tags": ["source token"],
        "responses": {
          "201": {
            "description": "",
            "schema": {"type": "object", "properties": {"id": {"type": "string"}}}
          }
        },
        "security": [{"Bearer": []}]
      }
    },
    "/source/token/{tokenId}":{
      "parameters": [
        {
          "in": "path",
          "name": "tokenId",
          "type": "string",
          "required": true,
          "description": ""
        }
      ],
      "get":{
        "summary": "get token by id",
        "tags": ["source token"],
        "responses":{
          "200": {
            "description": "",
            "schema": {"$ref": "#/definitions/SourceToken"}
          }
        },
        "security": [{"Bearer": []}]
      },
      "put":{
        "summary": "update token's description",
        "tags": ["source token"],
        "parameters": [{
          "in": "body",
          "name": "description",
          "schema": {
            "type": "object",
            "properties": {
              "description": {"type": "string"}
            }
          }
        }],
        "responses": {"200": {"description": "OK"}},
        "security": [{"Bearer": []}]
      },
      "delete":{
        "summary": "update token's description",
        "tags": ["source token"],
        "responses": {"200": {"description": "OK"}},
        "security": [{"Bearer": []}]
      }
    },
    "/source/tokens":{
      "get":{
        "summary": "get tokens by user",
        "tags": ["source token"],
        "responses":{
          "200": {
            "description": "",
            "schema":{
              "type": "array",
              "items": {"$ref": "#/definitions/SourceToken"}
            }
          }
        },
        "security": [{"Bearer": []}]
      }
    },
    "/source/tokens/{appId}":{
      "parameters":[{
        "in": "path",
        "name": "appId",
        "type": "string",
        "required": true,
        "description": ""
      }],
      "get": {
        "summary": "get tokens by app",
        "tags": ["source token"],
        "responses":{
          "200": {
            "description": "",
            "schema":{
              "type": "array",
              "items": {"$ref": "#/definitions/SourceToken"}
            }
          }
        },
        "security": [{"Bearer": []}]
      }
    },
    "/source/pull": {
      "post":{
        "summary": "Creates a new pull source as a task for the push mechanism. ",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "appId": {"type": "string"},
                "sourceURI": {"type": "string"},
                "interval": {"type": "integer"},
                "description": {"type": "string"}
              }
            }
          }
        ],
        "tags": ["pull source"],
        "responses": {
          "201": {
            "description": "",
            "schema": {"type": "object", "properties": {"id": {"type": "string"}}}
          }
        },
        "security": [{"Bearer": []}]
      }
    },
    "/storage/data/{storageId}":{
      "parameters":[{
        "in": "path",
        "name": "storageId",
        "type": "string",
        "required": true,
        "description": ""
      }],
      "get": {
        "summary": "get data payloads from a storage",
        "tags": ["data"],
        "responses":{
          "200": {
            "description": "",
            "schema":{
              "type": "array",
              "items": {"$ref": "#/definitions/Data"}
            }
          }
        },
        "security": [{"Bearer": []}]
      }
    }

  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Application": {
      "type": "object",
      "properties": {
        "appId": {"type": "string"},
        "userId": {"type": "string"},
        "description": {"type": "string"},
        "sourceType": {"type": "string", "enum": ["push", "pull"]},
        "persistRaw": {"type": "boolean", "description": "Choose if you want to save all the raw incoming data"},
        "rawStorageId": {"type": "string"},
        "createdAt": {"type": "string"},
        "modifiedAt": {"type": "string"}
      }
    },
    "User":{
      "type": "object",
      "properties": {
        "username": {"type": "string"},
        "email": {"type": "string"},
        "userId": {"type": "string"},
        "createdAt": {"type": "string"},
        "modifiedAt": {"type": "string"},
        "lastLogin": {"type": "string"}
      }
    },
    "Storage":{
      "type": "object",
      "properties": {
        "storageId": {"type": "string"},
        "userId": {"type": "string"},
        "type": {"type": "string"},
        "shared": {"type": "boolean"},
        "sharedWithId": {"type": "array", "items": {"type": "string"}},
        "description": {"type": "string"},
        "createdAt": {"type": "string"},
        "modifiedAt": {"type": "string"}
      }
    },
    "SourceToken":{
      "type": "object",
      "properties": {
        "sourceToken": {"type": "string"},
        "userId": {"type": "string"},
        "appId": {"type": "string"},
        "description": {"type": "string"},
        "createdAt": {"type": "string"},
        "modifiedAt": {"type": "string"}
      }
    },
    "Data":{
      "type": "object",
      "properties": {
        "payload": {"type": "object"},
        "user_id": {"type": "string"},
        "app_id": {"type": "string"},
        "arrived_at": {"type": "string"}
      }
    }
  }
}
